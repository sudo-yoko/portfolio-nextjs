バックエンドAPIはサーバーサイドから呼び出す。、
バックエンドAPIをサーバーサイドから呼ぶ方法は、サーバーアクションまたはapiルート。
ServerActionsを使う場合の構成
action -> fetcher -> client

fetcher/sender  ->  action(BFF)     -> client -> client(axios)
fetcher/sender  ->  api Route(BFF)  -> client -> client(axios)

依存の方向
・view -> view-model -> model
・BFF -> model



ファイルの命名

サンク＝引数なしの関数。呼べば実行する関数

web-to-caseをプロキシ経由で送信すると400エラーになる
・フォワードプロキシでフォームのPOST。POST + application/x-www-form-urlencoded
・プロキシのモックをurl -x http://localhost:9999 -X POST http://localhost:3001/serv～のように叩くと正常
・リクエスト先にはリクエストがとどいており、ステータス２００を返しているようですが、プロキシモックからクライアントにステータス４００が返っている
→http-proxy-agent をやめて、Axios 標準の proxy オプションを使用したところエラーが解消

・BFFに認証をつける
　サーバーアクションとAPIルートの認証
　BFFの認証エラーは例外
・BFFでバリデーション
  バリデーションエラーは戻すか
BFFでのエラーはクライアントに返し、クライアント側でエラーハンドリングを行う

カスタムエラーの作成

ページネーション
・totalが常に取得できる前提の設計
・連打に非対応（呼び元で制御必要）

チェックリスト
・server-only, client-onlyを明記し、サーバーサイドで使用するコードとクライアントサイドで使用するコードを一つのファイル(.ts)の中に混在させない。
　記載しないものはどちらで動作しても問題の無いコードとする
・バリデーションはクライアントとBFFの両方で行っているか
・リファクタリング耐性のある実装か
    ・リファクタリングで自動で全体に反映されるか
    ・自動で反映されなくてもコンパイルエラーで検知されるか
・サーバーサイドに認証チェック
・キャッシュバスティング

TSDocはMarkdownが使える

イベントリスナーでリサイズを登録
https://github.com/vercel/commerce/blob/main/components/layout/navbar/mobile-menu.tsx


環境変数取得の設計
環境変数をモックしやすい作りにする
ラッパー越し env.NODE_ENV を条件分岐に使う　→NG
ツリーシェイクしたい条件分岐は直接 process.env.NODE_ENV を使う。
process.env[key] の動的参照はビルド置換されないため、NEXT_PUBLIC_* でも undefined になる
クライアントで使うなら静的参照にする。process.env.NEXT_PUBLIC_DEBUG_LOG
クライアントでは環境変数を静的参照で参照する

グローバルハンドラでフロントのエラーを捕捉
window.addEventListener('error', (ev) => {

バリデーションはクライアントとBFFの両方で行うについて
BFF()でバリデーションすると、本来の返却とバリデーションエラーのレスポンスの２種類必要になってしまう。
BFFのバリデーションエラーは例外とするか


*******************
非同期関数にawaitつけ忘れ防止
→lint設定できる
npm i -D eslint-plugin-promise